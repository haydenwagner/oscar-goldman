import { Injectable } from '@angular/core';

import { Post } from './post';

import {Http} from "@angular/http";
import {Observable} from 'rxjs/Rx';

import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import {filterStackTrace} from "protractor/built/util";

@Injectable()
export class PostService {

  constructor(private http: Http) { }

  private postsUrl = 'http://localhost:3000/api/posts';
  private postUrl = 'http://localhost:3000/api/post/';
  prod = true;

  posts = [{"id":"2","cardImage":"../assets/temp/images/2/3_terminal-complete.jpg","title":"Make your WebStorm terminal great","author":"Hayden","preview":"Are you using Webstorm + git-bash + Windows? Integrate it all to make your terminal tasks super organized.","pubDate":"1/22/17","mainPoints":["To change WebStorm's terminal shell to the git-bash shell you should change the terminal's shell path setting to <kbd>C:\\Program Files\\Git\\bin\\sh.exe</kbd>","This is helpful for developers who want to take advantage of WebStorm's integrated terminal and still use bash commands in their shell."],"url":"make-your-webstorm-terminal-great","mdFileID":"a2","markdown":"<!--Using Git Bash in the native Webstorm terminal (Windows)-->\n<!--add note about path to git assumption-->\n<div class=\"alert alert-info\" role=\"alert\">\n  <strong>Note</strong>: If the path to your Git directory is not <kbd>C:\\Program Files\\Git</kbd> you will have to adjust the paths\n  in this post for the git-bash shell to work.\n</div>\n\n<h2 id=\"webstorm-terminal-settings\">WebStorm terminal settings</h2>\n<p>In WebStorm you can find the terminal settings under <samp>File/Settings/Terminal</samp> in the WebStorm interface. Here you can\nchange the &#39;shell path&#39; setting to change the shell in the integrated terminal.</p>\n<figure class=\"figure\">\n  <img src=\"../assets/temp/images/2/terminal-settings.jpg\" class=\"figure-img img-fluid rounded\" alt=\"Terminal settings in WebStorm\">\n  <figcaption class=\"figure-caption\">The WebStorm terminal settings window</figcaption>\n</figure>\n\n<h2 id=\"default-terminal-shell\">Default terminal shell</h2>\n<p>Shell path: <kbd>cmd.exe</kbd></p>\n<p>This is the default terminal shell in WebStorm(the windows command line shell). I wanted to get this same behavior in WebStorm with the git-bash shell. </p>\n<figure class=\"figure\">\n  <img src=\"../assets/temp/images/2/1_terminal-default-windows.jpg\" class=\"figure-img img-fluid rounded\" alt=\"Terminal with default Webstorm settings\">\n  <figcaption class=\"figure-caption\">WebStorm integrated terminal with default shell</figcaption>\n</figure>\n\n<h2 id=\"git-bash-terminal-shell-path\">Git Bash terminal shell path</h2>\n<p>Shell path: <kbd>C:\\Program Files\\Git\\bin\\sh.exe</kbd></p>\n<p>Here is the path that gave me exactly what I was looking for&mdash;with this terminal shell path WebStorm will open a new \nintegrated terminal tab running the git-bash shell. </p>\n<figure class=\"figure\">\n  <img src=\"../assets/temp/images/2/3_terminal-complete.jpg\" class=\"figure-img img-fluid rounded\" alt=\"Terminal with the git-bath shell exe\">\n  <figcaption class=\"figure-caption\">WebStorm integrated terminal with shell path set to the git-bash shell exe</figcaption>\n</figure>\n\n<p><mark>This is great for windows developers who use a bash shell because they can use the bash commands that they are familiar with while\nbenefiting from the efficiency of an integrated terminal.</mark></p>\n<p>The increase in efficiency is noticeable when you use multiple bash shells, as they are all organized as tabs inside the WebStorm terminal tool, instead of separate git-bash windows.</p>\n<figure class=\"figure\">\n  <img src=\"../assets/temp/images/2/4_terminal-4-different-git-bash-shells.jpg\" class=\"figure-img img-fluid rounded\" alt=\"WebStorm terminal with multiple bash shells\">\n  <figcaption class=\"figure-caption\">WebStorm terminal with four bash shells as different tabs</figcaption>\n</figure>\n\n<div class=\"alert alert-warning\" role=\"alert\">\n\n  <strong>Warning</strong>: Don&#39;t set the terminal shell path to the git-bash exe file: \n\n  <p><kbd>C:\\Program Files\\Git\\git-bash.exe</kbd></p>\n\n  <p>This path does start a git-bash shell, but it opens each new shell in a new window that is not integrated with the terminal.</p>\n\n  <figure class=\"figure\">\n    <img src=\"../assets/temp/images/2/2_terminal-git-bash-path.jpg\" class=\"figure-img img-fluid rounded\" alt=\"Terminal with the git-bath path exe\">\n    <figcaption class=\"figure-caption\">WebStorm integrated terminal with shell path set to the git-bash exe</figcaption>\n  </figure>\n</div>\n"},{"id":"3","cardImage":"../assets/temp/images/3/card_image.jpg","title":"Cross media publishing project","author":"Hayden","preview":"An undergraduate group project to improve an information system","pubDate":"1/25/17","mainPoints":["This project's main goal was to improve the organization of a set of existing help documents that had been published by our school’s publishing center","The final deliverables were the republished documents in print and web format","We used information schemas, xml markup and templating, and HTML and AJAX to create the project deliverables"],"url":"cross-media-publishing-project","mdFileID":"a3","markdown":"<!-- Title: Cross Media Publishing Project -->\n<h2 id=\"information-structuring\">Information structuring</h2>\n<h4 id=\"planning-and-schema-creation\">Planning and schema creation</h4>\n<p>Initially, we created user personas, use cases, and wireframes to focus the project scope and determine a structure for different information types. With these use cases in mind, we created our project’s XML schema. </p>\n<p>Our schema defined the different types of possible information that could be contained in the documents, the relationships of the different information types, and the allowed number of occurrences of every information type.</p>\n<figure class=\"figure\">\n  <img src=\"../assets/temp/images/3/schema.jpg\" class=\"figure-img img-fluid rounded\" alt=\"Visualization of our schema made in Oxygen XML editor\">\n  <figcaption class=\"figure-caption\">Visualization of our schema made in Oxygen XML editor</figcaption>\n</figure>\n\n<h4 id=\"custom-xml\">Custom XML</h4>\n<p>The information structure was then used to create an extensible markup language (XML) that was applied to the original content. Our group used XSL, a family of languages that allows users to navigate and transform XML documents, to generate our final documents.</p>\n<figure class=\"figure\">\n  <img src=\"../assets/temp/images/3/xsl-screenshot.jpg\" class=\"figure-img img-fluid rounded\" alt=\"XSL commands used to transform our XML documents\">\n  <figcaption class=\"figure-caption\">XSL commands used to transform our XML documents</figcaption>\n</figure>\n\n<h2 id=\"document-generation\">Document generation</h2>\n<h4 id=\"print-document-generation\">Print document generation</h4>\n<p>After the XSL templates were created, we used XSL:FO, a specific transformation language that is used for creating page layouts with XML documents, to generate PDF documents. </p>\n<h4 id=\"html-document-generation\">HTML document generation</h4>\n<p>To generate the HTML documents we used the same content and the same XML schema, but we applied a different transformation process that places the XML content into a HTML markup &#39;skeleton&#39;.</p>\n<figure class=\"figure\">\n  <img src=\"../assets/temp/images/3/html-screenshot.jpg\" class=\"figure-img img-fluid rounded\" alt=\"Sample of a generated HTML document\">\n  <figcaption class=\"figure-caption\">Sample of a generated HTML document</figcaption>\n</figure>\n\n<h2 id=\"website-development\">Website development</h2>\n<h4 id=\"wireframes\">Wireframes</h4>\n<p>First we created desktop and mobile wireframes to plan and organize the different views of our website.</p>\n<figure class=\"figure\">\n  <img src=\"../assets/temp/images/3/wireframe--desktop2-small.jpg\" class=\"figure-img img-fluid rounded\" alt=\"Wireframe of website's desktop view\"/>\n  <figcaption class=\"figure-caption\">Wireframe of website&#39;s desktop view</figcaption>\n</figure>\n\n<p>With the wireframes complete my team hosted our generated HTML documents, and styled our website elements to match the look of our wireframes.</p>\n<h4 id=\"ajax\">AJAX</h4>\n<p>The website incorporates Asynchronous JavaScript and XML (AJAX) in the navigation between categories and documents, which allows the website to only reload the parts of the webpage that need to change when a user switches documents or categories.</p>\n<figure class=\"figure\">\n  <video class=\"gfy-video\" autoplay=\"\" loop=\"\" playsinline=\"\" muted=\"\" poster=\"https://thumbs.gfycat.com/DefiniteWhimsicalElectriceel-poster.jpg\"><source src=\"https://zippy.gfycat.com/DefiniteWhimsicalElectriceel.webm\" type=\"video/webm\" class=\"webmsource\"><source src=\"https://zippy.gfycat.com/DefiniteWhimsicalElectriceel.mp4\" type=\"video/mp4\" class=\"mp4source\"></video>\n  <figcaption class=\"figure-caption\">Webpage using AJAX to switch documents and avoid a full page&nbsp;reload</figcaption>\n</figure>\n\n<h2 id=\"last-thoughts\">Last Thoughts</h2>\n<ul>\n<li><p>The project was very process heavy&mdash;we spent most of our time planning and creating information structures so that we could streamline the process of publishing the documents.</p>\n</li>\n<li><p>This project was successful; because these PDF and HTML documents were generated using the same information schema and markup, the information contained within the documents was formatted consistently. This was a great improvement over the formatting of content in the original documents, and it creates a solid framework for continuing to create well-formatted documents.</p>\n</li>\n</ul>\n"},{"id":"4","cardImage":"../assets/temp/images/4/card_image.jpg","title":"School of Media Sciences app","author":"Hayden","preview":"A digital publishing app made with a beta Adobe publishing framework.","pubDate":"1/26/17","mainPoints":["I worked on this project over a ten week period with another student; we were advised by two of our professors from our program","Our main goal was to create an interactive application, using new Adobe software, that showcased the School of Media Sciences at RIT to potential students, current students, and alumni"],"url":"school-of-media-sciences-app","mdFileID":"a4","markdown":"<!-- Title: School of Media Sciences app -->\n<h2 id=\"app-interface-examples\">App interface examples</h2>\n<p>Shown below are examples of the most recent versions of the app’s home screen and article design on different devices.</p>\n<figure class=\"figure\">\n  <div class=\"col-lg-8 offset-lg-2 col-md-8 offset-md-2\">\n    <img src=\"../assets/temp/images/4/ipad1.jpg\" alt=\"Tablet and mobile interface examples\">\n   </div>\n  <figcaption class=\"figure-caption\">Tablet and mobile interface examples</figcaption>\n</figure>\n\n<h2 id=\"project-approach\">Project approach</h2>\n<p>My project team beta tested Adobe&#39;s new digital publishing beta: Adobe Experience Manager—Mobile. This software moves away from monthly digital publication releases towards constantly updating content to encourage a higher level of user interaction with applications.</p>\n<p>The articles for the application were either static or interactive; the static articles were InDesign documents, and the interactive articles were web pages.</p>\n<h2 id=\"interactive-articles\">Interactive articles</h2>\n<p>As the &quot;technical lead&quot; of this project I was responsible for creating and testing interactive content, and handling app settings, layout, and distribution.</p>\n<p>Interactive articles for the app were created using HTML, CSS, and JavaScript to ensure proper device resizing and a high level of user interaction. Adobe&#39;s software allowed me to directly publish these html articles to our application.</p>\n<h3 id=\"co-op-map\">Co-op map</h3>\n<p>The co-op map is an interactive article I made that uses the Google Maps API and JavaScript to display the locations of student’s co-op companies. Clicking the map points shows more details about the companies in that location. The map features a filter function that allows the user to filter the points on the map by location and industry.</p>\n<figure class=\"figure\">\n  <img src=\"../assets/temp/images/4/mapPanZoom.jpg\" class=\"figure-img img-fluid rounded\" alt=\"Screenshot of the co-op map interactive article\">\n  <figcaption class=\"figure-caption\">Screenshot of the co-op map interactive article</figcaption>\n</figure>\n\n<h3 id=\"co-op-industry-visualization-donut-graph\">Co-op industry visualization donut graph</h3>\n<p>The Co-op Industry donut graph is an interactive article I made in which users touch sections of a &quot;donut&quot; graph to see what percentage of our students get co-ops in that industry.</p>\n<p>This article uses JavaScript and D3.js to create the animations that occur when a user interacts with the graph. If the user chooses an industry that is related to another app story, the article will display a link to that story at the bottom of the page (shown at the end of the .gif below).</p>\n<figure class=\"figure\">\n<video class=\"gfy-video\" autoplay=\"\" loop=\"\" playsinline=\"\" muted=\"\" poster=\"https://thumbs.gfycat.com/InformalQuaintCleanerwrasse-poster.jpg\"><source src=\"https://zippy.gfycat.com/InformalQuaintCleanerwrasse.webm\" type=\"video/webm\" class=\"webmsource\"><source src=\"https://zippy.gfycat.com/InformalQuaintCleanerwrasse.mp4\" type=\"video/mp4\" class=\"mp4source\"></video>\n  <figcaption class=\"figure-caption\">Interactive &#39;donut&#39; graph visual in action</figcaption>\n</figure>\n\n<h2 id=\"app-management\">App management</h2>\n<p>I managed the app submission and distribution processes through the Apple App Store and the Google Play Store; most of this work was figuring out how to create different certificates and meet other requirements that Apple has for apps on their store.</p>\n<h3 id=\"download-the-app-for-ios-or-android\">Download the App for iOS or Android</h3>\n<div class=\"alert alert-danger\" role=\"alert\">\n\n  <p><strong>Alert</strong>: I have moved on from this position, and I believe the app is not being managed or updated anymore.</p>\n\n  <p>You can still find the app with the links below; however, I don&#39;t know if it will have any recently added content or be fully operational.</p>\n\n\n  <!--appstore links-->\n  <div class=\"div_appstore-links\">\n  <a target=\"_blank\" href=\"https://geo.itunes.apple.com/us/app/rit-media-sciences/id1034416975?mt=8\"><img src=\"http://linkmaker.itunes.apple.com/images/badges/en-us/badge_appstore-lrg.svg\"></a>\n\n  <a target=\"_blank\" href=\"https://play.google.com/store/apps/details?id=edu.rit.smsappandroid&amp;hl=en&amp;utm_source=global_co&amp;utm_medium=prtnr&amp;utm_content=Mar2515&amp;utm_campaign=PartBadge&amp;pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1\" ><img alt=\"Get it on Google Play\" src=\"https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png\"></a>\n  </div>\n</div>\n"},{"id":"5","cardImage":"../assets/temp/images/5/new-slider_card.jpg","title":"slideswell","author":"Hayden","preview":"A good looking, small, pure JavaScript slider","pubDate":"2/8/17","mainPoints":["The goal of this project is to create an aesthetic slider for desktop and mobile projects that are trying to avoid including jQuery as a dependency.","The slider supports click and touch events, and its appearance is modeled after the Spotify album slider."],"url":"slideswell","mdFileID":"a5","markdown":"<!-- Title: slideswell -->\n<!-- A good looking, small, pure JavaScript slider -->\n<!--\nMain Points\n- The goal of this project is to create an aesthetic slider for desktop and mobile projects that are trying to avoid including jQuery as a dependency. \n- The slider supports click and touch events, and its appearance is modeled after the Spotify album slider.\n-->\n<h2 id=\"surrounded-by-sliders\">Surrounded by sliders</h2>\n<p>JavaScript sliders are everywhere&mdash;I found a ton of different options in the first few pages of a google search. Some of the more popular JS sliders are featured in the table below.</p>\n<table class=\"table table-bordered\">\n  <thead class=\"thead-default\">\n    <tr>\n      <th>Name</th>\n      <th>Requires jQuery?</th>\n      <th>File size*</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\"><a href=\"http://unslider.com/\" target=\"_blank\">Unslider</a></th>\n      <td>Yes</td>\n      <td>5.6kB</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><a href=\"http://kenwheeler.github.io/slick/\" target=\"_blank\">Slick</a></th>\n      <td>Yes</td>\n      <td>47kB</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><a href=\"http://supersimpleslider.com/\" target=\"_blank\">Super simple slider</a></th>\n      <td>Yes</td>\n      <td>&lt;1kB</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><a href=\"http://www.jssor.com/\" target=\"_blank\">Jssor</a></th>\n      <td>No</td>\n      <td>~50kB**</td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><a href=\"http://idangero.us/swiper/\" target=\"_blank\">Swiper</a></th>\n      <td>No</td>\n      <td>113kB</td>\n    </tr>\n  </tbody>\n</table>\n\n<p class=\"small\">\n  *The file size includes minified css files when applicable<br>\n\n  **Jssor has many different slider versions, this file size reflects the minified JS file size for their standard image slider.\n</p>\n\n<p>For projects that require an extensive and customizable slider, one from the list above should fit your needs. My favorite is Slick if you are using jQuery already, but Swiper is ridiculous (in a good way) if you aren&#39;t using jQuery and want to make a wild slider.</p>\n<h2 id=\"so-why-make-another-\">So why make another?</h2>\n<p>Why make another JS slider? Because <strong>most available JS sliders are relatively large or require jQuery</strong>&mdash;slideswell is different.</p>\n<ul>\n<li>slideswell does not require jQuery required</li>\n<li>slideswell is small (<strong>10.2kb</strong> for minified JS and CSS files in current release)</li>\n<li>slideswell has animated images and a smooth presentation</li>\n<li>slideswell supports mobile touch events</li>\n</ul>\n<h2 id=\"install-code-and-example\">Install code and example</h2>\n<p>The following code shows a simple HTML setup for slideswell. Link the JS and CSS, make a div with an ID that surrounds your images, and then pass that ID to a slideswell constructor.</p>\n<pre><code> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Test slideswell<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"slideswell.min.css\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"slideswell\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"testSlideswell\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"test1.jpg\"</span>/&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"test2.jpg\"</span>/&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"test3.jpg\"</span>/&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"test4.jpg\"</span>/&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"test5.jpg\"</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"slideswell.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"actionscript\">\n            <span class=\"hljs-keyword\">new</span> Slideswell(<span class=\"hljs-string\">\"testSlideswell\"</span>);\n        </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><!--\n<figure class=\"figure\">\n  <img src=\"../assets/temp/images/5/slideswell_close-crop.jpg\" class=\"figure-img img-fluid rounded no-touch\" alt=\"An example slideswell slider\">\n  <figcaption class=\"figure-caption\">A screenshot of an example slideswell slider</figcaption>\n</figure>\n-->\n<p>Here is the resulting slider:</p>\n<iframe width='100%' scrolling=\"no\" onload=\"this.style.height=this.contentDocument.body.scrollHeight +'px';\" src='../../assets/temp/images/6/index.html'></iframe>\n\n<!--\n<div class=\"alert alert-info\" role=\"alert\">\n  <strong>Note:</strong> I don't have an interactive slideswell example on this post yet, but <a href=\"http://bl.ocks.org/haydenwagner/raw/c23f63ad4c94622b14fdab9a62075d0b/\" target=\"_blank\">here you can view a simple demo</a> on the Gist hosting site 'bl.ocks.org'.\n</div>\n-->\n<h2 id=\"project-inspiration\">Project inspiration</h2>\n<p>The slideswell slider&#39;s name and behavior are inspired by the Spotify image slider (it slides well, and the images &#39;swell&#39; as they slide).</p>\n<figure class=\"figure\">\n  <img src=\"../assets/temp/images/5/spotify.jpg\" class=\"figure-img img-fluid rounded\" alt=\"slideswell inspiration: the spotify album slider\">\n  <figcaption class=\"figure-caption\">slideswell inspiration: the spotify album slider</figcaption>\n</figure>\n\n<h2 id=\"last-thoughts\">Last thoughts</h2>\n<ul>\n<li>I am aware that this is not revolutionary, but it can be useful for users who need a <strong>simple, quick, and small slider while not sacrificing looks and performance</strong>.</li>\n<li>I haven&#39;t focused on pairing down the code as much as possible yet&mdash;I believe can get the code much smaller.</li>\n<li>There are other similar projects, like <a href='http://www.menucool.com/javascript-image-slider' target=\"_blank\">Menucool&#39;s pure JS slider @ 16kb</a>, but I believe the animation and feel of slideswell is different.</li>\n</ul>\n<h2 id=\"-a-href-https-github-com-haydenwagner-slideswell-target-_blank-github-repo-link-a-\"><a href=\"https://github.com/haydenwagner/slideswell\" target=\"_blank\">Github repo link</a></h2>\n"},{"id":"7","cardImage":"../assets/temp/images/7/card-image.jpg","title":"D3 data-binding and selections","author":"Hayden","preview":"An interactive visual showing a few key concepts of the JS visualization library D3.js","pubDate":"3/5/17","mainPoints":["D3 joins data to visual elements so the data drives the visual","D3 'selections' allow for unique visual changes for the different states of changing data"],"url":"d3-data-bind-selections","mdFileID":"a7","markdown":"<!--\nTitle: D3 data-binding and selections\nPreview: An interactive visual showing a few key concepts of the JS visualization library D3.js\nMain Points:\n- D3 joins data to visual elements so the data drives the visual\n- D3 'selections' allow for unique visual changes for the different states of changing data\n-->\n<iframe width='100%' scrolling=\"no\" onload=\"this.style.height=this.contentDocument.body.scrollHeight +'px';\" src='../../assets/temp/images/7/index.html'></iframe>\n\n<h2 id=\"d3-data-joins-and-selections\">D3 data joins and selections</h2>\n<p>The data join concept is central to D3—this concept is simple once you understand it, but for whatever reason I wasn&#39;t able to fully wrap my head around it for a while.</p>\n<p>I made this visual to show the concepts of data joins and the enter, update, and exit selections. <strong>It allows users to manually add, change, and delete data points and watch the effect on the data-bound visual elements</strong>. The data is an array of x/y coordinates that are visible to the user, and the visual elements are circles that are positioned according to their corresponding coordinate data.</p>\n<h3 id=\"additional-reading\">Additional reading</h3>\n<p>I am not going to attempt to do a full write-up of D3 joins and selections because currently I can&#39;t offer a unique perspective that hasn&#39;t already been written about. If you need want to learn more the following posts are great starting resources.</p>\n<p><a href=\"https://bost.ocks.org/mike/join/\" target=\"_blank\">Mike Bostock, <em>Thinking with Joins</em></a> </br>\nMike Bostock is the creator of D3 and the authority on the subject. This article is helpful once you practice a little with D3 library, but it may be a little intimidating if you have no experience with D3.</p>\n<p><a href=\"https://medium.com/@c_behrens/enter-update-exit-6cafc6014c36#.3rzg38xsd\" target=\"_blank\">Christian Behrens, <em>Enter, Update, Exit</em></a> </br>\nIn my opinion, this article is more thorough at explaining selections in D3 if you have no previous experience. Compared to Bostock&#39;s post there is more content, different code examples, and the author works through the concept in a very incremental way.</p>\n<h3 id=\"-a-href-https-github-com-haydenwagner-toadvine-tree-enter-update-exit-target-_blank-github-repo-branch-link-a-\"><a href=\"https://github.com/haydenwagner/toadvine/tree/enter-update-exit\" target=\"_blank\">Github repo branch link</a></h3>\n"}]

    //Fetch all existing post
    getPosts(): Observable<Post[]> {
        if(this.prod){
            return new Observable(observer => {
                if (this.posts.length > 0){
                    console.log(this.posts);
                    observer.next(this.posts);
                }
                else{
                    observer.error('No posts available');
                }
            });
        }
        else {
            // ...using get request
            return this.http.get(this.postsUrl)
            // ...and calling .json() on the response to return data
                .map(res => res.json())
                //...errors if any
                .catch((error: any) => Observable.throw(error.json().error || 'Server error'));
        }
    }




    // Fetch all existing post
    getPost( post_url ): Observable<Post> {
      if(this.prod){
          return new Observable<Post>(observer => {
              let filteredPost = this.posts.filter(post => {
                  return post.url === post_url;
              })[0];
              if(filteredPost){
                  observer.next(filteredPost);
              }
              else{
                  observer.error('No post found');
              }

            });
      }
      else{
          // ...using get request
          return this.http.get(this.postUrl + post_url)
          // ...and calling .json() on the response to return data
              .map(res=> res.json())
              //...errors if any
              .catch((error: any) => Observable.throw(error.json().error || 'Server error'));
      }


    }

    // getPost( post_url ) {
    //
    // }



}

/*
new Post(6,"","Meta site post", "Hayden", "More info about the site and its purpose", "2/8/17", ["Building this website with Angular is overkill","The content is currently not ground-breaking","They serve a purpose for me to learn and improve as a writer and developer"], "meta-site-post", "<!--\nTitle: Meta site post\nPreview: META!\nMain Points:\n- Building this website with Angular is overkill\n- The content is currently not ground-breaking\n- They serve a purpose for me to learn and improve as a writer and developer\n-->\n<p>The purposes of this website are to give me practice with Angular 2, and to get me writing and thinking more about the web/software development world.</p>\n<p><strong>The Angular web framework is overkill for this application</strong>. A simple webpage would load the content I have here with zero wait time, and it wouldn’t have any impact on the current usability of the site. I decided to build the site with Angular because it was a challenge, and I wanted to learn more about web framework models, typescript, node, routing etc.</p>\n<p>Lately I have been looking at the <a href=\"http://emberjs.com\" target=\"_blank\">Ember.js framework</a> quite a bit, and I believe that it would be a better fit for this project. In the future I may keep this Angular site as a Github repo, and simplify the production site by switching to the Ember.js framework.</p>\n<p><strong>The world doesn’t really need another developer making useless posts</strong>. Currently the posts here give me content to manage and present on this site, and gets me writing and thinking about the development industry. In the future, hopefully, I can offer something unique that won’t add to the clutter on the internet.</p>\n<p>The site is currently under construction, you can find upcoming improvements and features in the <a href=\"https://github.com/haydenwagner/oscar-goldman/issues\" target=\"_blank\">project repo&#39;s issues</a>.</p>\n"),
    new Post(6,"","Meta site post", "Hayden", "More info about the site and its purpose", "2/8/17", ["Building this website with Angular is overkill","The content is currently not ground-breaking","They serve a purpose for me to learn and improve as a writer and developer"], "meta-site-post", "<!--\nTitle: Meta site post\nPreview: META!\nMain Points:\n- Building this website with Angular is overkill\n- The content is currently not ground-breaking\n- They serve a purpose for me to learn and improve as a writer and developer\n-->\n<p>The purposes of this website are to give me practice with Angular 2, and to get me writing and thinking more about the web/software development world.</p>\n<p><strong>The Angular web framework is overkill for this application</strong>. A simple webpage would load the content I have here with zero wait time, and it wouldn’t have any impact on the current usability of the site. I decided to build the site with Angular because it was a challenge, and I wanted to learn more about web framework models, typescript, node, routing etc.</p>\n<p>Lately I have been looking at the <a href=\"http://emberjs.com\" target=\"_blank\">Ember.js framework</a> quite a bit, and I believe that it would be a better fit for this project. In the future I may keep this Angular site as a Github repo, and simplify the production site by switching to the Ember.js framework.</p>\n<p><strong>The world doesn’t really need another developer making useless posts</strong>. Currently the posts here give me content to manage and present on this site, and gets me writing and thinking about the development industry. In the future, hopefully, I can offer something unique that won’t add to the clutter on the internet.</p>\n<p>The site is currently under construction, you can find upcoming improvements and features in the <a href=\"https://github.com/haydenwagner/oscar-goldman/issues\" target=\"_blank\">project repo&#39;s issues</a>.</p>\n")*/